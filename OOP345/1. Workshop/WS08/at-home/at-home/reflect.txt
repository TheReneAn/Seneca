// Name: Youjin An
// Seneca Student ID:140413188
// Seneca email:yan24@myseneca.ca
// Date of completion:18 March, 2020

1. The advantage that smart pointer syntax provides. Use example from your code to support your explanation.
A smart pointer is a class that wraps a 'raw' (or 'bare') C++ pointer, to manage the lifetime of the object being pointed to. 
There is no single smart pointer type, but all of them try to abstract a raw pointer in a practical way.

Working with smart pointer might saves you a lot of troubles chasing memory leaks.

List<Product> mergeRaw(const List<Description>& desc, const List<Price>& price) {
		List<Product> priceList;
		// TODO: Add your code here to build a list of products
		//         using raw pointers
		for (size_t i = 0; i < desc.size(); i++) {
			for (size_t j = 0; j < price.size(); j++) {
				if (desc[i].code == price[j].code) {
					Product* ptr = new Product(desc[i].desc, price[j].price);
					ptr->validate(); // Use the object in some way
					priceList += ptr;

					delete ptr; // Destroy the object. Done with it.
					ptr = nullptr;
				}
			}
		}

		return priceList;
	}

	List<Product> mergeSmart(const List<Description>& desc, const List<Price>& price) {
		List<Product> priceList;
		// TODO: Add your code here to build a list of products
		//         using smart pointers
		for (size_t i = 0; i < desc.size(); i++)
		{
			for (size_t n = 0; n < price.size(); n++)
			{
				if (desc[i].code == price[n].code)
				{
					std::unique_ptr<Product> ptr(new Product(desc[i].desc, price[n].price));
					ptr->validate(); // Use the object in some way.
					priceList += ptr;
				}
			}
		}

		return priceList;
	}

With raw pointers, the programmer has to explicitly destroy the object when it is no longer useful.

A smart pointer by comparison defines a policy as to when the object is destroyed. 
It still have to create the object, but you no longer have to worry about destroying it.

std::unique_ptrs are useful when you want to tie the lifetime of the object to a particular block of code, 
or if you embedded it as member data inside another object, the lifetime of that other object. 
The object exists until the containing block of code is exited, or until the containing object is itself destroyed.

2. The difference between raw and smart pointer syntax in your solution.

Smart pointers should be preferred over raw pointers. If you feel you need to use pointers (first consider if you really do), 
you would normally want to use a smart pointer as this can alleviate many of the problems with raw pointers, mainly forgetting to delete the object and leaking memory.











