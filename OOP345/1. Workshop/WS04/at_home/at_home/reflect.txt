// Name: Youjin An
// Seneca Student ID:140413188
// Seneca email:yan24@myseneca.ca
// Date of completion:01 Feb, 2020

1. The difference between the implementations of a composition and an aggregation.
- Aggregation (has-a + whole-part): Special kind of association where there is whole-part relation between two objects. they might live without each other though.
  Composition (has-a + whole-part + ownership): Special kind of aggregation. An Apartment is composed of some Rooms. A Room cannot exist without an Apartment. when an apartment is deleted, all associated rooms are deleted as well.
  ex) 
	public class Apartment{
    		private Room bedroom;
    		public Apartment() {
       			bedroom = new Room();
    		}
	}


2. The difference between the implementations of move and copy functions in a composition and an aggregation.
-  The subtle difference is, if you create with copy or move semantic a new object based on an existing one, that the copy semantic will copy the elements of the resource, that the move semantic will move the elements of the resource. Of course, copying is expensive, moving is cheap. 
   ex)
	estaurant::Restaurant(const Restaurant& res_copy) {
		if (this != &res_copy) {
			numOfres = res_copy.numOfres;
			if (res_copy.res != nullptr) {
				res = new Reservation[numOfres];
				for (size_t i = 0; i < numOfres; i++) {
					res[i] = res_copy.res[i];
				}
			}
			else {
				res = nullptr;
			}
		}
	}

	Restaurant::Restaurant(Restaurant&& move) {
		numOfres = move.numOfres;
		move.numOfres = 0;
		res = move.res;
		move.res = nullptr;
	}


3. I learned to design and code composition and aggregation class relationships.  I was struggling with the understanding of double-pointer. (const Reservation** revPointer;). It was hard for me to use many new algorithm functions.
