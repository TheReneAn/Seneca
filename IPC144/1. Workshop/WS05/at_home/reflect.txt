//----------------------------------------------
// Name:           Youjin An
// Student Number: 140413188
// Email:          yan24@myseneca.ca
// Section:        SII
// Workshop:       5 (at-home)
//----------------------------------------------

1. Using examples from this workshop to justify your point of view, discuss the advantages of
using an array of structs versus parallel arrays when dealing with related data.

Struct is convenient for grouping and using multiple types of data.
That is structured data types.

For example, there are 100 functions that reference the variable 'emp_num'.
However, if I have to add a variable called 'emp_age', I will need to modify the data 100 times for each function.

As such, "Struct" is easy to read and easy to modify the delivery data.
Initialization is also convenient.

"Parallel arrays" are easy to implement and easy to access using "index" so I can expect faster performance.

However, it is easy to store more data or waste memory than "struct" because it cannot change its size.


***In the code
#define SIZE 4

// Declare Struct Employee 
struct employee {
	int Id;			// Employ ID
	int Age;			// Age
	double Salary;		// Salary
};

struct employee emp[SIZE] = { {0} };


2. In this workshop, the Employee struct is declared in the emp_athome.c file. Where else
could it have been declared and what advantages might it have [Hint: this is explained in the
notes]?

"Employee structure" can be defined in "header file".
There are many advantages to making a header file. It's like choosing a book in the library.
We can use books as conveniently as we pick them from the library.

The person who makes the actual program work in "Main" simply needs to call up the header file when adding a function. It's very convenient just to call in.

// employ.h
struct employee {
	int Id;			// Employ ID
	int Age;			// Age
	double Salary;		// Salary
};


// emp_athome.c
#include <stdio.h>
#include "employ"

#define SIZE 4

int main(void){
	struct employee emp[SIZE] = { {0} };

	return 0;
}



3. After...

I thought it would be more convenient if I could use an array of structural pointers while doing this assignment. I wish I could send and receive parameters while using structure pointer arrangement..








